import sys
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget
from PyQt5.QtGui import QPalette, QColor, QFont, QPixmap
from PyQt5.QtCore import QProcess, Qt


from PyQt5.QtWidgets import (
    QApplication,
    QDialog,
    QMainWindow,
    QPushButton,
    QHBoxLayout,
    QVBoxLayout,
    QComboBox,
    QLabel,
    QFormLayout,
    QTabWidget,
    QLineEdit,
    QCheckBox,
    QGroupBox,
    QTextBrowser,
    QRadioButton,
    QDialogButtonBox,
    QMessageBox,
)

desp_font = QFont("Arial", 10)
desp_font.setWeight(QFont.Bold)
sys.path.insert(
    1,
    r"C://Users//zhiywong//OneDrive - Keysight Technologies//Documents//GitHub//PyVisa//src",
)
from Test import VoltageMeasurement, CurrentMeasurement
from data import *
from xlreport import xlreport

AdvancedSettingsList = []


class tab(QTabWidget):
    def __init__(self, parent=None):
        super(tab, self).__init__(parent)
        self.tab_VoltageAccuracy = QWidget()
        self.tab_CurrentAccuracy = QWidget()
        self.tab_LoadRegulation = QWidget()

        self.addTab(self.tab_VoltageAccuracy, "Voltage Accuracy")
        self.addTab(self.tab_CurrentAccuracy, "Current Accuracy")
        self.addTab(self.tab_LoadRegulation, "Load Regulation")
        self.VoltageAccuracyUI()
        self.CurrentAccuracyUI()
        self.LoadRegulationUI()

    def VoltageAccuracyUI(self):
        pixmap_VoltageAccuracy = QPixmap("GUI\img\Voltage Accuracy.PNG")
        label_VoltageAccuracy = QLabel()
        label_VoltageAccuracy.setPixmap(pixmap_VoltageAccuracy)
        layout = QVBoxLayout()
        layout.addWidget(label_VoltageAccuracy)
        layout.addWidget(QLabel("To measure the programable error of output voltage"))
        self.setTabText(0, "Voltage Accuracy")
        self.tab_VoltageAccuracy.setLayout(layout)

    def CurrentAccuracyUI(self):
        pixmap_CurrentAccuracy = QPixmap("GUI\img\Voltage Accuracy.PNG")
        label_CurrentAccuracy = QLabel()
        label_CurrentAccuracy.setPixmap(pixmap_CurrentAccuracy)
        layout = QVBoxLayout()
        layout.addWidget(label_CurrentAccuracy)
        layout.addWidget(QLabel("To measure the programm error of output current"))
        self.setTabText(1, "Current Accuracy")
        self.tab_CurrentAccuracy.setLayout(layout)

    def LoadRegulationUI(self):
        pixmap_LoadRegulation = QPixmap("GUI\img\Load Regulation.PNG")
        label_LoadRegulation = QLabel()
        label_LoadRegulation.setPixmap(pixmap_LoadRegulation)
        layout = QVBoxLayout()
        layout.addWidget(label_LoadRegulation)
        layout.addWidget(QLabel("Load Regulation"))
        self.setTabText(2, "Load Regulation")
        self.tab_LoadRegulation.setLayout(layout)

    def currentTabChanged(self, s):
        self.CurrentTab = s


class Window(QMainWindow):
    """Main window."""

    def __init__(self, parent=None):
        """Initializer."""
        super().__init__(parent)
        self.setWindowTitle("GUI")
        Tab = tab()
        mainLayout = QVBoxLayout()
        layout1 = QHBoxLayout()

        QLabel_Widget = QLabel()
        QLabel_Widget.setText("Choose Test:")

        QButton_Widget = QPushButton()
        QButton_Widget.setText("Confirm")
        QButton_Widget.setDefault(False)

        layout1.addWidget(QLabel_Widget)

        mainLayout.addLayout(layout1)
        mainLayout.addWidget(Tab)
        mainLayout.addWidget(QButton_Widget)

        widget = QWidget()
        widget.setLayout(mainLayout)
        self.setCentralWidget(widget)

        QButton_Widget.clicked.connect(self.PushBtnClicked)
        Tab.currentChanged.connect(self.currentTabChanged)
        self.CurrentTab = 0

    def currentTabChanged(self, s):
        self.CurrentTab = s

    def PushBtnClicked(self):
        if self.CurrentTab == 0:
            dlg = VoltageMeasurementDialog()
            dlg.exec()

        elif self.CurrentTab == 1:
            dlg = CurrentMeasurementDialog()
            dlg.exec()


class VoltageMeasurementDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Voltage Measurement")

        # QBtn = QDialogButtonBox.Save | QDialogButtonBox.Cancel

        # self.buttonBox = QDialogButtonBox(QBtn)
        # self.buttonBox.accepted.connect(self.accept)
        # self.buttonBox.rejected.connect(self.reject)

        QPushButton_Widget1 = QPushButton()
        QPushButton_Widget1.setText("Execute Test")
        QPushButton_Widget2 = QPushButton()
        QPushButton_Widget2.setText("Advanced Settings")
        QCheckBox_Widget = QCheckBox()
        QCheckBox_Widget.setText("Generate Excel Report")
        QCheckBox_Widget.setCheckState(Qt.Checked)
        layout1 = QFormLayout()

        Desp1 = QLabel()
        Desp2 = QLabel()
        Desp3 = QLabel()
        Desp4 = QLabel()
        Desp1.setFont(desp_font)
        Desp2.setFont(desp_font)
        Desp3.setFont(desp_font)
        Desp4.setFont(desp_font)

        Desp1.setText("Connections:")
        Desp2.setText("General Settings:")
        Desp3.setText("Voltage Sweep:")
        Desp4.setText("Current Sweep:")

        # Connections
        QLabel_PSU_VisaAddress = QLabel()
        QLabel_DMM_VisaAddress = QLabel()
        QLabel_ELoad_VisaAddress = QLabel()
        QLabel_PSU_VisaAddress.setText("Visa Address (PSU):")
        QLabel_DMM_VisaAddress.setText("Visa Address (DMM):")
        QLabel_ELoad_VisaAddress.setText("Visa Address (ELoad):")

        QLineEdit_PSU_VisaAddress = QLineEdit()
        QLineEdit_DMM_VisaAddress = QLineEdit()
        QLineEdit_ELoad_VisaAddress = QLineEdit()

        # General Settings
        QLabel_Voltage_Res = QLabel()
        QLabel_ELoad_Display_Channel = QLabel()
        QLabel_PSU_Display_Channel = QLabel()
        QLabel_set_Function = QLabel()
        QLabel_Voltage_Sense = QLabel()
        QLabel_Error_Gain = QLabel()
        QLabel_Error_Offset = QLabel()

        QLabel_Voltage_Res.setText("Voltage Resolution (DMM):")
        QLabel_ELoad_Display_Channel.setText("Display Channel (Eload):")
        QLabel_PSU_Display_Channel.setText("Display Channel (PSU):")
        QLabel_set_Function.setText("Mode(Eload):")
        QLabel_Voltage_Sense.setText("Voltage Sense:")
        QLabel_Error_Gain.setText("Programmable Error(Gain):")
        QLabel_Error_Offset.setText("Programmable Error (Offset):")

        QComboBox_Voltage_Res = QComboBox()
        QLineEdit_ELoad_Display_Channel = QLineEdit()
        QLineEdit_PSU_Display_Channel = QLineEdit()
        QComboBox_set_Function = QComboBox()
        QComboBox_Voltage_Sense = QComboBox()
        QLineEdit_Error_Gain = QLineEdit()
        QLineEdit_Error_Offset = QLineEdit()

        QComboBox_Voltage_Res.addItems(["SLOW", "MEDIUM", "FAST"])
        QComboBox_set_Function.addItems(
            [
                "Current Priority",
                "Voltage Priority",
                "Resistance Priority",
            ]
        )
        QComboBox_Voltage_Sense.addItems(["2 Wire", "4 Wire"])

        # Current Sweep
        QLabel_minCurrent = QLabel()
        QLabel_maxCurrent = QLabel()
        QLabel_current_step_size = QLabel()
        QLabel_minCurrent.setText("Initial Current (A):")
        QLabel_maxCurrent.setText("Final Current (A):")
        QLabel_current_step_size.setText("Step Size:")

        QLineEdit_minCurrent = QLineEdit()
        QLineEdit_maxCurrent = QLineEdit()
        QLineEdit_current_stepsize = QLineEdit()

        # Voltage Sweep
        QLabel_minVoltage = QLabel()
        QLabel_maxVoltage = QLabel()
        QLabel_voltage_step_size = QLabel()
        QLabel_minVoltage.setText("Initial Voltage (V):")
        QLabel_maxVoltage.setText("Final Voltage (V):")
        QLabel_voltage_step_size.setText("Step Size:")

        QLineEdit_minVoltage = QLineEdit()
        QLineEdit_maxVoltage = QLineEdit()
        QLineEdit_voltage_stepsize = QLineEdit()

        groupBox = QGroupBox()
        self.outputBox = QTextBrowser(groupBox)

        layout1.addRow(Desp1)
        layout1.addRow(QLabel_PSU_VisaAddress, QLineEdit_PSU_VisaAddress)
        layout1.addRow(QLabel_DMM_VisaAddress, QLineEdit_DMM_VisaAddress)
        layout1.addRow(QLabel_ELoad_VisaAddress, QLineEdit_ELoad_VisaAddress)
        layout1.addRow(Desp2)
        layout1.addRow(QLabel_ELoad_Display_Channel, QLineEdit_ELoad_Display_Channel)
        layout1.addRow(QLabel_PSU_Display_Channel, QLineEdit_PSU_Display_Channel)
        layout1.addRow(QLabel_set_Function, QComboBox_set_Function)
        layout1.addRow(QLabel_Voltage_Sense, QComboBox_Voltage_Sense)
        layout1.addRow(QLabel_Error_Gain, QLineEdit_Error_Gain)
        layout1.addRow(QLabel_Error_Offset, QLineEdit_Error_Offset)
        layout1.addRow(Desp3)
        layout1.addRow(QLabel_minVoltage, QLineEdit_minVoltage)
        layout1.addRow(QLabel_maxVoltage, QLineEdit_maxVoltage)
        layout1.addRow(QLabel_voltage_step_size, QLineEdit_voltage_stepsize)
        layout1.addRow(Desp4)
        layout1.addRow(QLabel_minCurrent, QLineEdit_minCurrent)
        layout1.addRow(QLabel_maxCurrent, QLineEdit_maxCurrent)
        layout1.addRow(QLabel_current_step_size, QLineEdit_current_stepsize)
        layout1.addRow(QCheckBox_Widget)
        layout1.addRow(QPushButton_Widget2)
        layout1.addRow(QPushButton_Widget1)

        # layout1.addRow(self.buttonBox)

        # Default Values
        self.Error_Gain = ""
        self.Error_Offset = ""
        self.minCurrent = ""
        self.maxCurrent = ""
        self.current_step_size = ""
        self.minVoltage = ""
        self.maxVoltage = ""
        self.voltage_step_size = ""
        self.PSU = ""
        self.DMM = ""
        self.ELoad = ""
        self.ELoad_Channel = ""
        self.PSU_Channel = ""

        self.setFunction = "Current"
        self.VoltageRes = "SLOW"
        self.VoltageSense = "INT"
        self.checkbox_data = 2
        self.Range = "Auto"
        self.Aperture = "10"
        self.AutoZero = "ON"
        self.inputZ = "ON"
        AdvancedSettingsList.append(self.Range)
        AdvancedSettingsList.append(self.Aperture)
        AdvancedSettingsList.append(self.AutoZero)
        AdvancedSettingsList.append(self.inputZ)
        self.setLayout(layout1)

        QLineEdit_PSU_VisaAddress.textEdited.connect(self.PSU_VisaAddress_changed)
        QLineEdit_DMM_VisaAddress.textEdited.connect(self.DMM_VisaAddress_changed)
        QLineEdit_ELoad_VisaAddress.textEdited.connect(self.ELoad_VisaAddress_changed)
        QLineEdit_ELoad_Display_Channel.textEdited.connect(self.ELoad_Channel_changed)
        QLineEdit_PSU_Display_Channel.textEdited.connect(self.PSU_Channel_changed)
        QLineEdit_Error_Gain.textEdited.connect(self.Error_Gain_changed)
        QLineEdit_Error_Offset.textEdited.connect(self.Error_Offset_changed)
        QLineEdit_minVoltage.textEdited.connect(self.minVoltage_changed)
        QLineEdit_maxVoltage.textEdited.connect(self.maxVoltage_changed)
        QLineEdit_minCurrent.textEdited.connect(self.minCurrent_changed)
        QLineEdit_maxCurrent.textEdited.connect(self.maxCurrent_changed)
        QLineEdit_voltage_stepsize.textEdited.connect(self.voltage_step_size_changed)
        QLineEdit_current_stepsize.textEdited.connect(self.current_step_size_changed)
        QComboBox_set_Function.currentTextChanged.connect(self.set_Function_changed)
        QComboBox_Voltage_Res.currentTextChanged.connect(self.set_VoltageRes_changed)
        QComboBox_Voltage_Sense.currentTextChanged.connect(
            self.set_VoltageSense_changed
        )
        QCheckBox_Widget.stateChanged.connect(self.checkbox_state)
        QPushButton_Widget1.clicked.connect(self.executeTest)
        QPushButton_Widget2.clicked.connect(self.openDialog)

    def PSU_VisaAddress_changed(self, s):
        self.PSU = s

    def DMM_VisaAddress_changed(self, s):
        self.DMM = s

    def ELoad_VisaAddress_changed(self, s):
        self.ELoad = s

    def ELoad_Channel_changed(self, s):
        self.ELoad_Channel = s

    def PSU_Channel_changed(self, s):
        self.PSU_Channel = s

    def Error_Gain_changed(self, s):
        self.Error_Gain = s

    def Error_Offset_changed(self, s):
        self.Error_Offset = s

    def minVoltage_changed(self, s):
        self.minVoltage = s

    def maxVoltage_changed(self, s):
        self.maxVoltage = s

    def minCurrent_changed(self, s):
        self.minCurrent = s

    def maxCurrent_changed(self, s):
        self.maxCurrent = s

    def voltage_step_size_changed(self, s):
        self.voltage_step_size = s

    def current_step_size_changed(self, s):
        self.current_step_size = s

    def set_Function_changed(self, s):
        if s == "Voltage Priority":
            self.setFunction = "Voltage"

        elif s == "Current Priority":
            self.setFunction = "Current"

        elif s == "Resistance Priority":
            self.setFunction = "Resistance"

    def set_VoltageRes_changed(self, s):
        self.VoltageRes = s

    def set_VoltageSense_changed(self, s):
        if s == "2 Wire":
            self.VoltageSense = "INT"
        elif s == "4 Wire":
            self.VoltageSense = "EXT"

    def setRange(self, value):
        AdvancedSettingsList[0] = value

    def setAperture(self, value):
        AdvancedSettingsList[1] = value

    def setAutoZero(self, value):
        AdvancedSettingsList[2] = value

    def setInputZ(self, value):
        AdvancedSettingsList[3] = value

    def checkbox_state(self, s):
        self.checkbox_data = s

    def openDialog(self):
        dlg = AdvancedSetting_Voltage()
        dlg.exec()

    def executeTest(self):
        my_dict = {
            "Error Gain": [self.Error_Gain],
            "Error_Offset": [self.Error_Offset],
            "Minimum Current": [self.minCurrent],
            "Maximum Current": [self.maxCurrent],
            "Step Size (Current)": [self.current_step_size],
            "Minimum Voltage": [self.minVoltage],
            "Maximum Voltage": [self.maxVoltage],
            "Step Size (Voltage)": [self.voltage_step_size],
            "PSU Visa Address": [self.PSU],
            "DMM Visa Address": [self.DMM],
            "ELoad Visa Address": [self.ELoad],
            "ELoad Channel": [self.ELoad_Channel],
            "PSU Channel": [self.PSU_Channel],
            "Voltage Sense": [self.VoltageSense],
            "Voltage Resolution": [self.VoltageRes],
            "Voltage Range": [AdvancedSettingsList[0]],
            "NPLC Value": [AdvancedSettingsList[1]],
            "Auto Zero": [AdvancedSettingsList[2]],
            "Auto Input Impedance": [AdvancedSettingsList[3]],
        }

        for i in [
            self.Error_Gain,
            self.Error_Offset,
            self.minCurrent,
            self.maxCurrent,
            self.current_step_size,
            self.minVoltage,
            self.maxVoltage,
            self.voltage_step_size,
            self.PSU,
            self.DMM,
            self.ELoad,
            self.ELoad_Channel,
            self.PSU_Channel,
            self.VoltageSense,
            self.VoltageRes,
            self.setFunction,
            AdvancedSettingsList[0],
            AdvancedSettingsList[1],
            AdvancedSettingsList[2],
            AdvancedSettingsList[3],
        ]:
            if i == "":
                QMessageBox.warning(
                    self, "Error", "One of the parameters are not filled in"
                )
                break
        else:
            if self.checkbox_data == 2:
                VoltageMeasurement.settings(self, self.Error_Gain, self.Error_Offset)
                dataList, infoList = VoltageMeasurement.executeVoltageMeasurement(
                    self,
                    self.Error_Gain,
                    self.Error_Offset,
                    self.minCurrent,
                    self.maxCurrent,
                    self.current_step_size,
                    self.minVoltage,
                    self.maxVoltage,
                    self.voltage_step_size,
                    self.PSU,
                    self.DMM,
                    self.ELoad,
                    self.ELoad_Channel,
                    self.PSU_Channel,
                    self.VoltageSense,
                    self.VoltageRes,
                    self.setFunction,
                    AdvancedSettingsList[0],
                    AdvancedSettingsList[1],
                    AdvancedSettingsList[2],
                    AdvancedSettingsList[3],
                )

                instrumentData(self.PSU, self.DMM, self.ELoad)
                datatoCSV_Accuracy(infoList, dataList)
                datatoGraph(infoList, dataList)
                datatoGraph.scatterCompareVoltage(
                    self, float(self.Error_Gain), float(self.Error_Offset)
                )
                A = xlreport()
                A.run()
                df = pd.DataFrame.from_dict(my_dict, orient="index")
                df.to_csv("csv/config.csv")
            elif self.checkbox_data == 0:
                VoltageMeasurement.settings(self, self.Error_Gain, self.Error_Offset)
                dataList, infoList = VoltageMeasurement.executeVoltageMeasurement(
                    self,
                    self.Error_Gain,
                    self.Error_Offset,
                    self.minCurrent,
                    self.maxCurrent,
                    self.current_step_size,
                    self.minVoltage,
                    self.maxVoltage,
                    self.voltage_step_size,
                    self.PSU,
                    self.DMM,
                    self.ELoad,
                    self.ELoad_Channel,
                    self.PSU_Channel,
                    self.VoltageSense,
                    self.VoltageRes,
                    self.setFunction,
                )
            dataList.clear()
            infoList.clear()
            AdvancedSettingsList.clear()


class CurrentMeasurementDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Current Measurement")

        # QBtn = QDialogButtonBox.Save | QDialogButtonBox.Cancel

        # self.buttonBox = QDialogButtonBox(QBtn)
        # self.buttonBox.accepted.connect(self.accept)
        # self.buttonBox.rejected.connect(self.reject)

        QPushButton_Widget1 = QPushButton()
        QPushButton_Widget1.setText("Execute Test")
        QPushButton_Widget2 = QPushButton()
        QPushButton_Widget2.setText("Advanced Settings")
        QCheckBox_Widget = QCheckBox()
        QCheckBox_Widget.setText("Generate Excel Report")
        QCheckBox_Widget.setCheckState(Qt.Checked)
        layout1 = QFormLayout()

        Desp1 = QLabel()
        Desp2 = QLabel()
        Desp3 = QLabel()
        Desp4 = QLabel()
        Desp1.setFont(desp_font)
        Desp2.setFont(desp_font)
        Desp3.setFont(desp_font)
        Desp4.setFont(desp_font)

        Desp1.setText("Connections:")
        Desp2.setText("General Settings:")
        Desp3.setText("Voltage Sweep:")
        Desp4.setText("Current Sweep:")

        # Connections
        QLabel_PSU_VisaAddress = QLabel()
        QLabel_DMM_VisaAddress = QLabel()
        QLabel_ELoad_VisaAddress = QLabel()
        QLabel_PSU_VisaAddress.setText("Visa Address (PSU):")
        QLabel_DMM_VisaAddress.setText("Visa Address (DMM):")
        QLabel_ELoad_VisaAddress.setText("Visa Address (ELoad):")

        QLineEdit_PSU_VisaAddress = QLineEdit()
        QLineEdit_DMM_VisaAddress = QLineEdit()
        QLineEdit_ELoad_VisaAddress = QLineEdit()

        # General Settings
        QLabel_Voltage_Res = QLabel()
        QLabel_ELoad_Display_Channel = QLabel()
        QLabel_PSU_Display_Channel = QLabel()
        QLabel_set_Function = QLabel()
        QLabel_Voltage_Sense = QLabel()
        QLabel_Error_Gain = QLabel()
        QLabel_Error_Offset = QLabel()
        QLabel_Range = QLabel()

        QLabel_Voltage_Res.setText("Current Resolution (DMM):")
        QLabel_ELoad_Display_Channel.setText("Display Channel (Eload):")
        QLabel_PSU_Display_Channel.setText("Display Channel (PSU):")
        QLabel_set_Function.setText("Mode(Eload):")
        QLabel_Voltage_Sense.setText("Current Sense:")
        QLabel_Error_Gain.setText("Programmable Error(Gain):")
        QLabel_Error_Offset.setText("Programmable Error (Offset):")
        QLabel_Range.setText("Current Range:")

        QComboBox_Voltage_Res = QComboBox()
        QLineEdit_ELoad_Display_Channel = QLineEdit()
        QLineEdit_PSU_Display_Channel = QLineEdit()
        QComboBox_set_Function = QComboBox()
        QComboBox_Voltage_Sense = QComboBox()
        QLineEdit_Error_Gain = QLineEdit()
        QLineEdit_Error_Offset = QLineEdit()
        QComboBox_Range = QComboBox()
        QComboBox_Voltage_Res.addItems(["SLOW", "MEDIUM", "FAST"])
        QComboBox_set_Function.addItems(
            [
                "Current Priority",
                "Voltage Priority",
                "Resistance Priority",
            ]
        )
        QComboBox_Voltage_Sense.addItems(["2 Wire", "4 Wire"])
        QComboBox_Range.addItems(["Auto", "10mA", "100mA", "1A", "3A"])
        # Current Sweep
        QLabel_minCurrent = QLabel()
        QLabel_maxCurrent = QLabel()
        QLabel_current_step_size = QLabel()
        QLabel_minCurrent.setText("Initial Current (A):")
        QLabel_maxCurrent.setText("Final Current (A):")
        QLabel_current_step_size.setText("Step Size:")

        QLineEdit_minCurrent = QLineEdit()
        QLineEdit_maxCurrent = QLineEdit()
        QLineEdit_current_stepsize = QLineEdit()

        # Voltage Sweep
        QLabel_minVoltage = QLabel()
        QLabel_maxVoltage = QLabel()
        QLabel_voltage_step_size = QLabel()
        QLabel_minVoltage.setText("Initial Voltage (V):")
        QLabel_maxVoltage.setText("Final Voltage (V):")
        QLabel_voltage_step_size.setText("Step Size:")

        QLineEdit_minVoltage = QLineEdit()
        QLineEdit_maxVoltage = QLineEdit()
        QLineEdit_voltage_stepsize = QLineEdit()

        groupBox = QGroupBox()
        self.outputBox = QTextBrowser(groupBox)

        layout1.addRow(Desp1)
        layout1.addRow(QLabel_PSU_VisaAddress, QLineEdit_PSU_VisaAddress)
        layout1.addRow(QLabel_DMM_VisaAddress, QLineEdit_DMM_VisaAddress)
        layout1.addRow(QLabel_ELoad_VisaAddress, QLineEdit_ELoad_VisaAddress)
        layout1.addRow(Desp2)
        layout1.addRow(QLabel_ELoad_Display_Channel, QLineEdit_ELoad_Display_Channel)
        layout1.addRow(QLabel_PSU_Display_Channel, QLineEdit_PSU_Display_Channel)
        layout1.addRow(QLabel_set_Function, QComboBox_set_Function)
        layout1.addRow(QLabel_Voltage_Sense, QComboBox_Voltage_Sense)
        layout1.addRow(QLabel_Error_Gain, QLineEdit_Error_Gain)
        layout1.addRow(QLabel_Error_Offset, QLineEdit_Error_Offset)
        layout1.addRow(Desp3)
        layout1.addRow(QLabel_minVoltage, QLineEdit_minVoltage)
        layout1.addRow(QLabel_maxVoltage, QLineEdit_maxVoltage)
        layout1.addRow(QLabel_voltage_step_size, QLineEdit_voltage_stepsize)
        layout1.addRow(Desp4)
        layout1.addRow(QLabel_minCurrent, QLineEdit_minCurrent)
        layout1.addRow(QLabel_maxCurrent, QLineEdit_maxCurrent)
        layout1.addRow(QLabel_current_step_size, QLineEdit_current_stepsize)
        layout1.addRow(QCheckBox_Widget)
        layout1.addRow(QPushButton_Widget2)
        layout1.addRow(QPushButton_Widget1)

        # layout1.addRow(self.buttonBox)
        # Default Values
        self.Error_Gain = ""
        self.Error_Offset = ""
        self.minCurrent = ""
        self.maxCurrent = ""
        self.current_step_size = ""
        self.minVoltage = ""
        self.maxVoltage = ""
        self.voltage_step_size = ""
        self.PSU = ""
        self.DMM = ""
        self.ELoad = ""
        self.ELoad_Channel = ""
        self.PSU_Channel = ""

        self.setFunction = "Current"
        self.CurrentRes = "SLOW"
        self.CurrentSense = "INT"
        self.checkbox_data = 2
        self.Range = "Auto"
        self.Aperture = "10"
        self.AutoZero = "ON"
        self.Terminal = "3A"
        AdvancedSettingsList.append(self.Range)
        AdvancedSettingsList.append(self.Aperture)
        AdvancedSettingsList.append(self.AutoZero)
        AdvancedSettingsList.append(self.Terminal)
        self.setLayout(layout1)

        QLineEdit_PSU_VisaAddress.textEdited.connect(self.PSU_VisaAddress_changed)
        QLineEdit_DMM_VisaAddress.textEdited.connect(self.DMM_VisaAddress_changed)
        QLineEdit_ELoad_VisaAddress.textEdited.connect(self.ELoad_VisaAddress_changed)
        QLineEdit_ELoad_Display_Channel.textEdited.connect(self.ELoad_Channel_changed)
        QLineEdit_PSU_Display_Channel.textEdited.connect(self.PSU_Channel_changed)
        QLineEdit_Error_Gain.textEdited.connect(self.Error_Gain_changed)
        QLineEdit_Error_Offset.textEdited.connect(self.Error_Offset_changed)
        QLineEdit_minVoltage.textEdited.connect(self.minVoltage_changed)
        QLineEdit_maxVoltage.textEdited.connect(self.maxVoltage_changed)
        QLineEdit_minCurrent.textEdited.connect(self.minCurrent_changed)
        QLineEdit_maxCurrent.textEdited.connect(self.maxCurrent_changed)
        QLineEdit_voltage_stepsize.textEdited.connect(self.voltage_step_size_changed)
        QLineEdit_current_stepsize.textEdited.connect(self.current_step_size_changed)
        QComboBox_set_Function.currentTextChanged.connect(self.set_Function_changed)
        QComboBox_Voltage_Res.currentTextChanged.connect(self.set_VoltageRes_changed)
        QComboBox_Voltage_Sense.currentTextChanged.connect(
            self.set_VoltageSense_changed
        )
        QCheckBox_Widget.stateChanged.connect(self.checkbox_state)
        QPushButton_Widget1.clicked.connect(self.executeTest)
        QPushButton_Widget2.clicked.connect(self.openDialog)

    def PSU_VisaAddress_changed(self, s):
        self.PSU = s

    def DMM_VisaAddress_changed(self, s):
        self.DMM = s

    def ELoad_VisaAddress_changed(self, s):
        self.ELoad = s

    def ELoad_Channel_changed(self, s):
        self.ELoad_Channel = s

    def PSU_Channel_changed(self, s):
        self.PSU_Channel = s

    def Error_Gain_changed(self, s):
        self.Error_Gain = s

    def Error_Offset_changed(self, s):
        self.Error_Offset = s

    def minVoltage_changed(self, s):
        self.minVoltage = s

    def maxVoltage_changed(self, s):
        self.maxVoltage = s

    def minCurrent_changed(self, s):
        self.minCurrent = s

    def maxCurrent_changed(self, s):
        self.maxCurrent = s

    def voltage_step_size_changed(self, s):
        self.voltage_step_size = s

    def current_step_size_changed(self, s):
        self.current_step_size = s

    def set_Function_changed(self, s):
        if s == "Voltage Priority":
            self.setFunction = "Voltage"

        elif s == "Current Priority":
            self.setFunction = "Current"

        elif s == "Resistance Priority":
            self.setFunction = "Resistance"

    def set_VoltageRes_changed(self, s):
        self.VoltageRes = s

    def set_VoltageSense_changed(self, s):
        if s == "2 Wire":
            self.VoltageSense = "INT"
        elif s == "4 Wire":
            self.VoltageSense = "EXT"

    def checkbox_state(self, s):
        self.checkbox_data = s

    def set_CurrentRange_changed(self, s):
        self.CurrentRange = s

    def openDialog(self):
        dlg = AdvancedSetting_Current()
        dlg.exec()

    def setRange(self, value):
        AdvancedSettingsList[0] = value

    def setAperture(self, value):
        AdvancedSettingsList[1] = value

    def setAutoZero(self, value):
        AdvancedSettingsList[2] = value

    def setTerminal(self, value):
        AdvancedSettingsList[3] = value

    def executeTest(self):
        my_dict = {
            "Error Gain": [self.Error_Gain],
            "Error_Offset": [self.Error_Offset],
            "Minimum Current": [self.minCurrent],
            "Maximum Current": [self.maxCurrent],
            "Step Size (Current)": [self.current_step_size],
            "Minimum Voltage": [self.minVoltage],
            "Maximum Voltage": [self.maxVoltage],
            "Step Size (Voltage)": [self.voltage_step_size],
            "PSU Visa Address": [self.PSU],
            "DMM Visa Address": [self.DMM],
            "ELoad Visa Address": [self.ELoad],
            "ELoad Channel": [self.ELoad_Channel],
            "PSU Channel": [self.PSU_Channel],
            "Current Sense": [self.CurrentSense],
            "Current Resolution": [self.CurrentRes],
            "Current Range": [AdvancedSettingsList[0]],
            "NPLC Value": [AdvancedSettingsList[1]],
            "Auto Zero": [AdvancedSettingsList[2]],
            "Terminal": [AdvancedSettingsList[3]],
        }
        print(AdvancedSettingsList)
        for i in [
            self.Error_Gain,
            self.Error_Offset,
            self.minCurrent,
            self.maxCurrent,
            self.current_step_size,
            self.minVoltage,
            self.maxVoltage,
            self.voltage_step_size,
            self.PSU,
            self.DMM,
            self.ELoad,
            self.ELoad_Channel,
            self.PSU_Channel,
            self.VoltageSense,
            self.VoltageRes,
            self.setFunction,
            self.CurrentRange,
            AdvancedSettingsList[0],
            AdvancedSettingsList[1],
            AdvancedSettingsList[2],
            AdvancedSettingsList[3],
        ]:
            if i == "":
                QMessageBox.warning(
                    self, "Error", "One of the parameters are not filled in"
                )
                break

        else:
            if self.checkbox_data == 2:
                CurrentMeasurement.settings(self, self.Error_Gain, self.Error_Offset)
                dataList, infoList = CurrentMeasurement.executeCurrentMeasurement(
                    self,
                    self.Error_Gain,
                    self.Error_Offset,
                    self.minCurrent,
                    self.maxCurrent,
                    self.current_step_size,
                    self.minVoltage,
                    self.maxVoltage,
                    self.voltage_step_size,
                    self.PSU,
                    self.DMM,
                    self.ELoad,
                    self.ELoad_Channel,
                    self.PSU_Channel,
                    self.VoltageSense,
                    self.VoltageRes,
                    self.setFunction,
                    AdvancedSettingsList[0],
                    AdvancedSettingsList[1],
                    AdvancedSettingsList[2],
                    AdvancedSettingsList[3],
                )

                instrumentData(self.PSU, self.DMM, self.ELoad)
                datatoCSV_Accuracy(infoList, dataList)
                datatoGraph(infoList, dataList)
                datatoGraph.scatterCompareCurrent(
                    self, float(self.Error_Gain), float(self.Error_Offset)
                )

                A = xlreport()
                A.run()
                df = pd.DataFrame.from_dict(my_dict, orient="index")
                df.to_csv("csv/config.csv")

            elif self.checkbox_data == 0:
                CurrentMeasurement.settings(self, self.Error_Gain, self.Error_Offset)
                dataList, infoList = CurrentMeasurement.executeCurrentMeasurement(
                    self,
                    self.Error_Gain,
                    self.Error_Offset,
                    self.minCurrent,
                    self.maxCurrent,
                    self.current_step_size,
                    self.minVoltage,
                    self.maxVoltage,
                    self.voltage_step_size,
                    self.PSU,
                    self.DMM,
                    self.ELoad,
                    self.ELoad_Channel,
                    self.PSU_Channel,
                    self.VoltageSense,
                    self.VoltageRes,
                    self.setFunction,
                )
            dataList.clear()
            infoList.clear()
            AdvancedSettingsList.clear()


class AdvancedSetting_Voltage(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Advanced Window (Voltage)")
        QPushButton_Widget = QPushButton()

        QPushButton_Widget.setText("Confirm")
        layout1 = QFormLayout()

        Desp = QLabel()
        Desp.setText("Advanced Settings:")

        QLabel_Range = QLabel()
        QLabel_Aperture = QLabel()
        QLabel_AutoZero = QLabel()
        QLabel_InputZ = QLabel()

        QLabel_Range.setText("DC Voltage Range")
        QLabel_Aperture.setText("NPLC")
        QLabel_AutoZero.setText("Auto Zero Function")
        QLabel_InputZ.setText("Input Impedance")

        QComboBox_Range = QComboBox()
        QComboBox_Aperture = QComboBox()
        QComboBox_AutoZero = QComboBox()
        QComboBox_InputZ = QComboBox()

        QComboBox_Range.addItems(["Auto", "100mV", "1V", "10V", "100V", "1kV"])
        QComboBox_Aperture.addItems(
            ["0.001", "0.002", "0.006", "0.02", "0.06", "0.2", "1", "10", "100"]
        )
        QComboBox_AutoZero.addItems(["ON", "OFF"])
        QComboBox_InputZ.addItems(["10M", "Auto"])

        layout1.addRow(Desp)
        layout1.addRow(QLabel_Range, QComboBox_Range)
        layout1.addRow(QLabel_Aperture, QComboBox_Aperture)
        layout1.addRow(QLabel_AutoZero, QComboBox_AutoZero)
        layout1.addRow(QLabel_InputZ, QComboBox_InputZ)
        layout1.addRow(QPushButton_Widget)
        self.setLayout(layout1)

        # Default Values

        QPushButton_Widget.clicked.connect(self.close)
        QComboBox_Range.currentTextChanged.connect(self.RangeChanged)
        QComboBox_Aperture.currentTextChanged.connect(self.ApertureChanged)
        QComboBox_AutoZero.currentTextChanged.connect(self.AutoZeroChanged)
        QComboBox_InputZ.currentTextChanged.connect(self.InputZChanged)

    def RangeChanged(self, s):
        self.Range = s
        VoltageMeasurementDialog.setRange(self, self.Range)

    def ApertureChanged(self, s):
        self.Aperture = s
        VoltageMeasurementDialog.setAperture(self, self.Aperture)

    def AutoZeroChanged(self, s):
        self.AutoZero = s
        VoltageMeasurementDialog.setAutoZero(self, self.AutoZero)

    def InputZChanged(self, s):
        self.inputZ = s
        VoltageMeasurementDialog.setInputZ(self, self.inputZ)


class AdvancedSetting_Current(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Advanced Window (Current)")
        QPushButton_Widget = QPushButton()

        QPushButton_Widget.setText("Confirm")
        layout1 = QFormLayout()

        Desp = QLabel()
        Desp.setText("Advanced Settings:")

        QLabel_Range = QLabel()
        QLabel_Aperture = QLabel()
        QLabel_AutoZero = QLabel()
        QLabel_Terminal = QLabel()

        QLabel_Range.setText("DC Voltage Range")
        QLabel_Aperture.setText("NPLC")
        QLabel_AutoZero.setText("Auto Zero Function")
        QLabel_Terminal.setText("Current Terminal:")

        QComboBox_Range = QComboBox()
        QComboBox_Aperture = QComboBox()
        QComboBox_AutoZero = QComboBox()
        QComboBox_Terminal = QComboBox()

        QComboBox_Range.addItems(["Auto", "0.001", "0.01", "0.1", "1", "3"])
        QComboBox_Aperture.addItems(
            ["0.001", "0.002", "0.006", "0.02", "0.06", "0.2", "1", "10", "100"]
        )
        QComboBox_AutoZero.addItems(["ON", "OFF"])
        QComboBox_Terminal.addItems(["3A", "10A"])

        layout1.addRow(Desp)
        layout1.addRow(QLabel_Range, QComboBox_Range)
        layout1.addRow(QLabel_Aperture, QComboBox_Aperture)
        layout1.addRow(QLabel_AutoZero, QComboBox_AutoZero)
        layout1.addRow(QLabel_Terminal, QComboBox_Terminal)
        layout1.addRow(QPushButton_Widget)
        self.setLayout(layout1)

        QPushButton_Widget.clicked.connect(self.close)
        QComboBox_Range.currentTextChanged.connect(self.RangeChanged)
        QComboBox_Aperture.currentTextChanged.connect(self.ApertureChanged)
        QComboBox_AutoZero.currentTextChanged.connect(self.AutoZeroChanged)
        QComboBox_Terminal.currentTextChanged.connect(self.TerminalChanged)

    def RangeChanged(self, s):
        self.Range = s
        CurrentMeasurementDialog.setRange(self, self.Range)

    def ApertureChanged(self, s):
        self.Aperture = s
        CurrentMeasurementDialog.setAperture(self, self.Aperture)

    def AutoZeroChanged(self, s):
        self.AutoZero = s
        CurrentMeasurementDialog.setAutoZero(self, self.AutoZero)

    def TerminalChanged(self, s):
        self.Terminal = s
        CurrentMeasurementDialog.setTerminal(self, self.Terminal)


if __name__ == "__main__":
    # Create the application
    app = QApplication(sys.argv)
    # Create and show the application's main window
    win = Window()
    win.show()
    # Run the application's main loop
    sys.exit(app.exec())
