import sys
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget
from PyQt5.QtGui import QPalette, QColor, QFont
from PyQt5.QtCore import QProcess, Qt

from PyQt5.QtWidgets import (
    QApplication,
    QDialog,
    QMainWindow,
    QPushButton,
    QHBoxLayout,
    QVBoxLayout,
    QComboBox,
    QLabel,
    QFormLayout,
    QDialogButtonBox,
    QLineEdit,
    QCheckBox,
    QGroupBox,
    QTextBrowser,
)

desp_font = QFont("Arial", 10)
desp_font.setWeight(QFont.Bold)
sys.path.insert(
    1,
    r"C://Users//zhiywong//OneDrive - Keysight Technologies//Documents//GitHub//PyVisa//src",
)
from Test import VoltageMeasurement, CurrentMeasurement
from Data import *
from xlreport import xlreport


class Window(QMainWindow):
    """Main window."""

    def __init__(self, parent=None):
        """Initializer."""
        super().__init__(parent)
        self.setWindowTitle("GUI")

        mainLayout = QVBoxLayout()
        layout1 = QHBoxLayout()

        QLabel_Widget = QLabel()
        QLabel_Widget.setText("Choose Test:")

        QComboBox_Widget = QComboBox()
        QComboBox_Widget.addItems(["Voltage Accuracy Test", "Current Accuracy Test"])

        QButton_Widget = QPushButton()
        QButton_Widget.setText("Confirm")
        QButton_Widget.setDefault(False)

        layout1.addWidget(QLabel_Widget)
        layout1.addWidget(QComboBox_Widget)
        mainLayout.addLayout(layout1)
        mainLayout.addWidget(QButton_Widget)

        widget = QWidget()
        widget.setLayout(mainLayout)
        self.setCentralWidget(widget)

        QComboBox_Widget.currentTextChanged.connect(self.currentTextChanged)
        QButton_Widget.clicked.connect(self.PushBtnClicked)

        self.TestSelection = "Voltage Accuracy Test"

    def currentTextChanged(self, s):
        self.TestSelection = s

    def PushBtnClicked(self):
        if self.TestSelection == "Voltage Accuracy Test":
            dlg = VoltageMeasurementDialog(self.TestSelection)
            dlg.exec()

        elif self.TestSelection == "Current Accuracy Test":
            dlg = CurrentMeasurementDialog(self.TestSelection)
            dlg.exec()


class VoltageMeasurementDialog(QDialog):
    def __init__(self, CurrentTest):
        super().__init__()
        self.setWindowTitle(CurrentTest)

        # QBtn = QDialogButtonBox.Save | QDialogButtonBox.Cancel

        # self.buttonBox = QDialogButtonBox(QBtn)
        # self.buttonBox.accepted.connect(self.accept)
        # self.buttonBox.rejected.connect(self.reject)

        QPushButton_Widget = QPushButton()
        QPushButton_Widget.setText("Execute Test")
        QCheckBox_Widget = QCheckBox()
        QCheckBox_Widget.setText("Generate Excel Report")
        QCheckBox_Widget.setCheckState(Qt.Checked)
        layout1 = QFormLayout()

        Desp1 = QLabel()
        Desp2 = QLabel()
        Desp3 = QLabel()
        Desp4 = QLabel()
        Desp1.setFont(desp_font)
        Desp2.setFont(desp_font)
        Desp3.setFont(desp_font)
        Desp4.setFont(desp_font)

        Desp1.setText("Connections:")
        Desp2.setText("General Settings:")
        Desp3.setText("Voltage Sweep:")
        Desp4.setText("Current Sweep:")

        # Connections
        QLabel_PSU_VisaAddress = QLabel()
        QLabel_DMM_VisaAddress = QLabel()
        QLabel_ELoad_VisaAddress = QLabel()
        QLabel_PSU_VisaAddress.setText("Visa Address (PSU):")
        QLabel_DMM_VisaAddress.setText("Visa Address (DMM):")
        QLabel_ELoad_VisaAddress.setText("Visa Address (ELoad):")

        QLineEdit_PSU_VisaAddress = QLineEdit()
        QLineEdit_DMM_VisaAddress = QLineEdit()
        QLineEdit_ELoad_VisaAddress = QLineEdit()

        # General Settings
        QLabel_Voltage_Res = QLabel()
        QLabel_ELoad_Display_Channel = QLabel()
        QLabel_PSU_Display_Channel = QLabel()
        QLabel_set_Function = QLabel()
        QLabel_Voltage_Sense = QLabel()
        QLabel_Error_Gain = QLabel()
        QLabel_Error_Offset = QLabel()

        QLabel_Voltage_Res.setText("Voltage Resolution (DMM):")
        QLabel_ELoad_Display_Channel.setText("Display Channel (Eload):")
        QLabel_PSU_Display_Channel.setText("Display Channel (PSU):")
        QLabel_set_Function.setText("Mode(Eload):")
        QLabel_Voltage_Sense.setText("Voltage Sense:")
        QLabel_Error_Gain.setText("Programmable Error(Gain):")
        QLabel_Error_Offset.setText("Programmable Error (Offset):")

        QComboBox_Voltage_Res = QComboBox()
        QLineEdit_ELoad_Display_Channel = QLineEdit()
        QLineEdit_PSU_Display_Channel = QLineEdit()
        QComboBox_set_Function = QComboBox()
        QComboBox_Voltage_Sense = QComboBox()
        QLineEdit_Error_Gain = QLineEdit()
        QLineEdit_Error_Offset = QLineEdit()

        QComboBox_Voltage_Res.addItems(["SLOW", "MEDIUM", "FAST"])
        QComboBox_set_Function.addItems(
            [
                "Current Priority",
                "Voltage Priority",
                "Resistance Priority",
            ]
        )
        QComboBox_Voltage_Sense.addItems(["2 Wire", "4 Wire"])

        # Current Sweep
        QLabel_minCurrent = QLabel()
        QLabel_maxCurrent = QLabel()
        QLabel_current_step_size = QLabel()
        QLabel_minCurrent.setText("Initial Current (A):")
        QLabel_maxCurrent.setText("Final Current (A):")
        QLabel_current_step_size.setText("Step Size:")

        QLineEdit_minCurrent = QLineEdit()
        QLineEdit_maxCurrent = QLineEdit()
        QLineEdit_current_stepsize = QLineEdit()

        # Voltage Sweep
        QLabel_minVoltage = QLabel()
        QLabel_maxVoltage = QLabel()
        QLabel_voltage_step_size = QLabel()
        QLabel_minVoltage.setText("Initial Voltage (V):")
        QLabel_maxVoltage.setText("Final Voltage (V):")
        QLabel_voltage_step_size.setText("Step Size:")

        QLineEdit_minVoltage = QLineEdit()
        QLineEdit_maxVoltage = QLineEdit()
        QLineEdit_voltage_stepsize = QLineEdit()

        groupBox = QGroupBox()
        self.outputBox = QTextBrowser(groupBox)

        layout1.addRow(Desp1)
        layout1.addRow(QLabel_PSU_VisaAddress, QLineEdit_PSU_VisaAddress)
        layout1.addRow(QLabel_DMM_VisaAddress, QLineEdit_DMM_VisaAddress)
        layout1.addRow(QLabel_ELoad_VisaAddress, QLineEdit_ELoad_VisaAddress)
        layout1.addRow(Desp2)
        layout1.addRow(QLabel_Voltage_Res, QComboBox_Voltage_Res)
        layout1.addRow(QLabel_ELoad_Display_Channel, QLineEdit_ELoad_Display_Channel)
        layout1.addRow(QLabel_PSU_Display_Channel, QLineEdit_PSU_Display_Channel)
        layout1.addRow(QLabel_set_Function, QComboBox_set_Function)
        layout1.addRow(QLabel_Voltage_Sense, QComboBox_Voltage_Sense)
        layout1.addRow(QLabel_Error_Gain, QLineEdit_Error_Gain)
        layout1.addRow(QLabel_Error_Offset, QLineEdit_Error_Offset)
        layout1.addRow(Desp3)
        layout1.addRow(QLabel_minVoltage, QLineEdit_minVoltage)
        layout1.addRow(QLabel_maxVoltage, QLineEdit_maxVoltage)
        layout1.addRow(QLabel_voltage_step_size, QLineEdit_voltage_stepsize)
        layout1.addRow(Desp4)
        layout1.addRow(QLabel_minCurrent, QLineEdit_minCurrent)
        layout1.addRow(QLabel_maxCurrent, QLineEdit_maxCurrent)
        layout1.addRow(QLabel_current_step_size, QLineEdit_current_stepsize)
        layout1.addRow(QCheckBox_Widget)
        layout1.addRow(QPushButton_Widget)

        # layout1.addRow(self.buttonBox)
        # Default Values
        self.setFunction = "Current"
        self.VoltageRes = "SLOW"
        self.VoltageSense = "INT"
        self.checkbox_data = 2
        self.setLayout(layout1)

        QLineEdit_PSU_VisaAddress.textEdited.connect(self.PSU_VisaAddress_changed)
        QLineEdit_DMM_VisaAddress.textEdited.connect(self.DMM_VisaAddress_changed)
        QLineEdit_ELoad_VisaAddress.textEdited.connect(self.ELoad_VisaAddress_changed)
        QLineEdit_ELoad_Display_Channel.textEdited.connect(self.ELoad_Channel_changed)
        QLineEdit_PSU_Display_Channel.textEdited.connect(self.PSU_Channel_changed)
        QLineEdit_Error_Gain.textEdited.connect(self.Error_Gain_changed)
        QLineEdit_Error_Offset.textEdited.connect(self.Error_Offset_changed)
        QLineEdit_minVoltage.textEdited.connect(self.minVoltage_changed)
        QLineEdit_maxVoltage.textEdited.connect(self.maxVoltage_changed)
        QLineEdit_minCurrent.textEdited.connect(self.minCurrent_changed)
        QLineEdit_maxCurrent.textEdited.connect(self.maxCurrent_changed)
        QLineEdit_voltage_stepsize.textEdited.connect(self.voltage_step_size_changed)
        QLineEdit_current_stepsize.textEdited.connect(self.current_step_size_changed)
        QComboBox_set_Function.currentTextChanged.connect(self.set_Function_changed)
        QComboBox_Voltage_Res.currentTextChanged.connect(self.set_VoltageRes_changed)
        QComboBox_Voltage_Sense.currentTextChanged.connect(
            self.set_VoltageSense_changed
        )
        QCheckBox_Widget.stateChanged.connect(self.checkbox_state)
        QPushButton_Widget.clicked.connect(self.executeTest)

    def PSU_VisaAddress_changed(self, s):
        self.PSU = s

    def DMM_VisaAddress_changed(self, s):
        self.DMM = s

    def ELoad_VisaAddress_changed(self, s):
        self.ELoad = s

    def ELoad_Channel_changed(self, s):
        self.ELoad_Channel = s

    def PSU_Channel_changed(self, s):
        self.PSU_Channel = s

    def Error_Gain_changed(self, s):
        self.Error_Gain = s

    def Error_Offset_changed(self, s):
        self.Error_Offset = s

    def minVoltage_changed(self, s):
        self.minVoltage = s

    def maxVoltage_changed(self, s):
        self.maxVoltage = s

    def minCurrent_changed(self, s):
        self.minCurrent = s

    def maxCurrent_changed(self, s):
        self.maxCurrent = s

    def voltage_step_size_changed(self, s):
        self.voltage_step_size = s

    def current_step_size_changed(self, s):
        self.current_step_size = s

    def set_Function_changed(self, s):
        if s == "Voltage Priority":
            self.setFunction = "Voltage"

        elif s == "Current Priority":
            self.setFunction = "Current"

        elif s == "Resistance Priority":
            self.setFunction = "Resistance"

    def set_VoltageRes_changed(self, s):
        self.VoltageRes = s

    def set_VoltageSense_changed(self, s):
        if s == "2 Wire":
            self.VoltageSense = "INT"
        elif s == "4 Wire":
            self.VoltageSense = "EXT"

    def checkbox_state(self, s):
        self.checkbox_data = s
        print(self.checkbox_data)

    def executeTest(self):
        if self.checkbox_data == 2:
            VoltageMeasurement.settings(self, self.Error_Gain, self.Error_Offset)
            dataList, infoList = VoltageMeasurement.executeVoltageMeasurement(
                self,
                self.Error_Gain,
                self.Error_Offset,
                self.minCurrent,
                self.maxCurrent,
                self.current_step_size,
                self.minVoltage,
                self.maxVoltage,
                self.voltage_step_size,
                self.PSU,
                self.DMM,
                self.ELoad,
                self.ELoad_Channel,
                self.PSU_Channel,
                self.VoltageSense,
                self.VoltageRes,
                self.setFunction,
            )

            instrumentData(self.PSU, self.DMM, self.ELoad)
            datatoCSV(infoList, dataList)
            datatoGraph(infoList, dataList)
            datatoGraph.scatterCompareVoltage(
                self, float(self.Error_Gain), float(self.Error_Offset)
            )
            A = xlreport()
            A.run()
        elif self.checkbox_data == 0:
            VoltageMeasurement.settings(self, self.Error_Gain, self.Error_Offset)
            dataList, infoList = VoltageMeasurement.executeVoltageMeasurement(
                self,
                self.Error_Gain,
                self.Error_Offset,
                self.minCurrent,
                self.maxCurrent,
                self.current_step_size,
                self.minVoltage,
                self.maxVoltage,
                self.voltage_step_size,
                self.PSU,
                self.DMM,
                self.ELoad,
                self.ELoad_Channel,
                self.PSU_Channel,
                self.VoltageSense,
                self.VoltageRes,
                self.setFunction,
            )


class CurrentMeasurementDialog(QDialog):
    def __init__(self, CurrentTest):
        super().__init__()
        self.setWindowTitle(CurrentTest)

        # QBtn = QDialogButtonBox.Save | QDialogButtonBox.Cancel

        # self.buttonBox = QDialogButtonBox(QBtn)
        # self.buttonBox.accepted.connect(self.accept)
        # self.buttonBox.rejected.connect(self.reject)

        QPushButton_Widget = QPushButton()
        QPushButton_Widget.setText("Execute Test")
        QCheckBox_Widget = QCheckBox()
        QCheckBox_Widget.setText("Generate Excel Report")
        QCheckBox_Widget.setCheckState(Qt.Checked)
        layout1 = QFormLayout()

        Desp1 = QLabel()
        Desp2 = QLabel()
        Desp3 = QLabel()
        Desp4 = QLabel()
        Desp1.setFont(desp_font)
        Desp2.setFont(desp_font)
        Desp3.setFont(desp_font)
        Desp4.setFont(desp_font)

        Desp1.setText("Connections:")
        Desp2.setText("General Settings:")
        Desp3.setText("Voltage Sweep:")
        Desp4.setText("Current Sweep:")

        # Connections
        QLabel_PSU_VisaAddress = QLabel()
        QLabel_DMM_VisaAddress = QLabel()
        QLabel_ELoad_VisaAddress = QLabel()
        QLabel_PSU_VisaAddress.setText("Visa Address (PSU):")
        QLabel_DMM_VisaAddress.setText("Visa Address (DMM):")
        QLabel_ELoad_VisaAddress.setText("Visa Address (ELoad):")

        QLineEdit_PSU_VisaAddress = QLineEdit()
        QLineEdit_DMM_VisaAddress = QLineEdit()
        QLineEdit_ELoad_VisaAddress = QLineEdit()

        # General Settings
        QLabel_Voltage_Res = QLabel()
        QLabel_ELoad_Display_Channel = QLabel()
        QLabel_PSU_Display_Channel = QLabel()
        QLabel_set_Function = QLabel()
        QLabel_Voltage_Sense = QLabel()
        QLabel_Error_Gain = QLabel()
        QLabel_Error_Offset = QLabel()

        QLabel_Voltage_Res.setText("Current Resolution (DMM):")
        QLabel_ELoad_Display_Channel.setText("Display Channel (Eload):")
        QLabel_PSU_Display_Channel.setText("Display Channel (PSU):")
        QLabel_set_Function.setText("Mode(Eload):")
        QLabel_Voltage_Sense.setText("Current Sense:")
        QLabel_Error_Gain.setText("Programmable Error(Gain):")
        QLabel_Error_Offset.setText("Programmable Error (Offset):")

        QComboBox_Voltage_Res = QComboBox()
        QLineEdit_ELoad_Display_Channel = QLineEdit()
        QLineEdit_PSU_Display_Channel = QLineEdit()
        QComboBox_set_Function = QComboBox()
        QComboBox_Voltage_Sense = QComboBox()
        QLineEdit_Error_Gain = QLineEdit()
        QLineEdit_Error_Offset = QLineEdit()

        QComboBox_Voltage_Res.addItems(["SLOW", "MEDIUM", "FAST"])
        QComboBox_set_Function.addItems(
            [
                "Current Priority",
                "Voltage Priority",
                "Resistance Priority",
            ]
        )
        QComboBox_Voltage_Sense.addItems(["2 Wire", "4 Wire"])

        # Current Sweep
        QLabel_minCurrent = QLabel()
        QLabel_maxCurrent = QLabel()
        QLabel_current_step_size = QLabel()
        QLabel_minCurrent.setText("Initial Current (A):")
        QLabel_maxCurrent.setText("Final Current (A):")
        QLabel_current_step_size.setText("Step Size:")

        QLineEdit_minCurrent = QLineEdit()
        QLineEdit_maxCurrent = QLineEdit()
        QLineEdit_current_stepsize = QLineEdit()

        # Voltage Sweep
        QLabel_minVoltage = QLabel()
        QLabel_maxVoltage = QLabel()
        QLabel_voltage_step_size = QLabel()
        QLabel_minVoltage.setText("Initial Voltage (V):")
        QLabel_maxVoltage.setText("Final Voltage (V):")
        QLabel_voltage_step_size.setText("Step Size:")

        QLineEdit_minVoltage = QLineEdit()
        QLineEdit_maxVoltage = QLineEdit()
        QLineEdit_voltage_stepsize = QLineEdit()

        groupBox = QGroupBox()
        self.outputBox = QTextBrowser(groupBox)

        layout1.addRow(Desp1)
        layout1.addRow(QLabel_PSU_VisaAddress, QLineEdit_PSU_VisaAddress)
        layout1.addRow(QLabel_DMM_VisaAddress, QLineEdit_DMM_VisaAddress)
        layout1.addRow(QLabel_ELoad_VisaAddress, QLineEdit_ELoad_VisaAddress)
        layout1.addRow(Desp2)
        layout1.addRow(QLabel_Voltage_Res, QComboBox_Voltage_Res)
        layout1.addRow(QLabel_ELoad_Display_Channel, QLineEdit_ELoad_Display_Channel)
        layout1.addRow(QLabel_PSU_Display_Channel, QLineEdit_PSU_Display_Channel)
        layout1.addRow(QLabel_set_Function, QComboBox_set_Function)
        layout1.addRow(QLabel_Voltage_Sense, QComboBox_Voltage_Sense)
        layout1.addRow(QLabel_Error_Gain, QLineEdit_Error_Gain)
        layout1.addRow(QLabel_Error_Offset, QLineEdit_Error_Offset)
        layout1.addRow(Desp3)
        layout1.addRow(QLabel_minVoltage, QLineEdit_minVoltage)
        layout1.addRow(QLabel_maxVoltage, QLineEdit_maxVoltage)
        layout1.addRow(QLabel_voltage_step_size, QLineEdit_voltage_stepsize)
        layout1.addRow(Desp4)
        layout1.addRow(QLabel_minCurrent, QLineEdit_minCurrent)
        layout1.addRow(QLabel_maxCurrent, QLineEdit_maxCurrent)
        layout1.addRow(QLabel_current_step_size, QLineEdit_current_stepsize)
        layout1.addRow(QCheckBox_Widget)
        layout1.addRow(QPushButton_Widget)

        # layout1.addRow(self.buttonBox)
        # Default Values
        self.setFunction = "Current"
        self.VoltageRes = "SLOW"
        self.VoltageSense = "INT"
        self.checkbox_data = 2
        self.setLayout(layout1)

        QLineEdit_PSU_VisaAddress.textEdited.connect(self.PSU_VisaAddress_changed)
        QLineEdit_DMM_VisaAddress.textEdited.connect(self.DMM_VisaAddress_changed)
        QLineEdit_ELoad_VisaAddress.textEdited.connect(self.ELoad_VisaAddress_changed)
        QLineEdit_ELoad_Display_Channel.textEdited.connect(self.ELoad_Channel_changed)
        QLineEdit_PSU_Display_Channel.textEdited.connect(self.PSU_Channel_changed)
        QLineEdit_Error_Gain.textEdited.connect(self.Error_Gain_changed)
        QLineEdit_Error_Offset.textEdited.connect(self.Error_Offset_changed)
        QLineEdit_minVoltage.textEdited.connect(self.minVoltage_changed)
        QLineEdit_maxVoltage.textEdited.connect(self.maxVoltage_changed)
        QLineEdit_minCurrent.textEdited.connect(self.minCurrent_changed)
        QLineEdit_maxCurrent.textEdited.connect(self.maxCurrent_changed)
        QLineEdit_voltage_stepsize.textEdited.connect(self.voltage_step_size_changed)
        QLineEdit_current_stepsize.textEdited.connect(self.current_step_size_changed)
        QComboBox_set_Function.currentTextChanged.connect(self.set_Function_changed)
        QComboBox_Voltage_Res.currentTextChanged.connect(self.set_VoltageRes_changed)
        QComboBox_Voltage_Sense.currentTextChanged.connect(
            self.set_VoltageSense_changed
        )
        QCheckBox_Widget.stateChanged.connect(self.checkbox_state)
        QPushButton_Widget.clicked.connect(self.executeTest)

    def PSU_VisaAddress_changed(self, s):
        self.PSU = s

    def DMM_VisaAddress_changed(self, s):
        self.DMM = s

    def ELoad_VisaAddress_changed(self, s):
        self.ELoad = s

    def ELoad_Channel_changed(self, s):
        self.ELoad_Channel = s

    def PSU_Channel_changed(self, s):
        self.PSU_Channel = s

    def Error_Gain_changed(self, s):
        self.Error_Gain = s

    def Error_Offset_changed(self, s):
        self.Error_Offset = s

    def minVoltage_changed(self, s):
        self.minVoltage = s

    def maxVoltage_changed(self, s):
        self.maxVoltage = s

    def minCurrent_changed(self, s):
        self.minCurrent = s

    def maxCurrent_changed(self, s):
        self.maxCurrent = s

    def voltage_step_size_changed(self, s):
        self.voltage_step_size = s

    def current_step_size_changed(self, s):
        self.current_step_size = s

    def set_Function_changed(self, s):
        if s == "Voltage Priority":
            self.setFunction = "Voltage"

        elif s == "Current Priority":
            self.setFunction = "Current"

        elif s == "Resistance Priority":
            self.setFunction = "Resistance"

    def set_VoltageRes_changed(self, s):
        self.VoltageRes = s

    def set_VoltageSense_changed(self, s):
        if s == "2 Wire":
            self.VoltageSense = "INT"
        elif s == "4 Wire":
            self.VoltageSense = "EXT"

    def checkbox_state(self, s):
        self.checkbox_data = s
        print(self.checkbox_data)

    def executeTest(self):
        if self.checkbox_data == 2:
            CurrentMeasurement.settings(self, self.Error_Gain, self.Error_Offset)
            dataList, infoList = CurrentMeasurement.executeCurrentMeasurement(
                self,
                self.Error_Gain,
                self.Error_Offset,
                self.minCurrent,
                self.maxCurrent,
                self.current_step_size,
                self.minVoltage,
                self.maxVoltage,
                self.voltage_step_size,
                self.PSU,
                self.DMM,
                self.ELoad,
                self.ELoad_Channel,
                self.PSU_Channel,
                self.VoltageSense,
                self.VoltageRes,
                self.setFunction,
            )

            instrumentData(self.PSU, self.DMM, self.ELoad)
            datatoCSV(infoList, dataList)
            datatoGraph(infoList, dataList)
            datatoGraph.scatterCompareCurrent(
                self, float(self.Error_Gain), float(self.Error_Offset)
            )

            A = xlreport()
            A.run()

        elif self.checkbox_data == 0:
            CurrentMeasurement.settings(self, self.Error_Gain, self.Error_Offset)
            dataList, infoList = CurrentMeasurement.executeCurrentMeasurement(
                self,
                self.Error_Gain,
                self.Error_Offset,
                self.minCurrent,
                self.maxCurrent,
                self.current_step_size,
                self.minVoltage,
                self.maxVoltage,
                self.voltage_step_size,
                self.PSU,
                self.DMM,
                self.ELoad,
                self.ELoad_Channel,
                self.PSU_Channel,
                self.VoltageSense,
                self.VoltageRes,
                self.setFunction,
            )


if __name__ == "__main__":
    # Create the application
    app = QApplication(sys.argv)
    # Create and show the application's main window
    win = Window()
    win.show()
    # Run the application's main loop
    sys.exit(app.exec())
